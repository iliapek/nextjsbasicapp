name: Deploy Next.js App to AKS (DevSecOps Pipeline)

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main  

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
    
    # Step 1: Checkout code
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Node.js environment
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18.x'  

    # Step 3: Install dependencies and run security checks on dependencies
    - name: Install dependencies and run npm audit
      run: |
        npm install
        npm audit fix --force
        npm audit --audit-level=high  # Only allow high severity issues

    # Step 4: Install Docker for image building and scanning
    - name: Install Docker (Latest version with Scan)
      run: |
        # Remove older Docker versions if present
        sudo apt-get remove docker docker-engine docker.io containerd runc
        
        # Update package index
        sudo apt-get update
        
        # Install dependencies
        sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
        
        # Add Docker's official GPG key
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        
        # Set up the stable repository for Docker
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        
        # Update package index again
        sudo apt-get update
        
        # Install Docker CE (Community Edition) - this version includes Docker Scan (Snyk)
        sudo apt-get install docker-ce docker-ce-cli containerd.io
        
        # Verify Docker version and Docker Scan command
        docker --version
      #  docker scan --version

    # Step 5: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/nextjsapp:${{ github.sha }} .

   # Step 6: Scan Docker image using Docker Scan 
 #   - name: Scan Docker image with Docker Scan
  #    run: |
   #     docker scan ${{ secrets.ACR_NAME }}.azurecr.io/nextjsapp:${{ github.sha }}


    # Step 7: Log in to Azure and Azure Container Registry (ACR)
    - name: Log in to Azure
      run: |
        az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Log in to ACR
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}

    # Step 8: Push Docker image to ACR
    - name: Push Docker image to ACR
      run: |
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/nextjsapp:${{ github.sha }}

    # Step 9: Deploy to AKS cluster
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing

    - name: Deploy to AKS with kubectl
      run: |
        kubectl apply -f k8s-deployment.yaml  # Ensure you have a valid Kubernetes deployment file
        kubectl set image deployment/nextjsapp nextjsapp=${{ secrets.ACR_NAME }}.azurecr.io/nextjsapp:${{ github.sha }}

    # Step 10: Clean up
    - name: Clean up old images from ACR 
      run: |
        az acr repository delete --name ${{ secrets.ACR_NAME }} --image nextjsapp:old --yes  # Optional: Clean up old images to save storage
